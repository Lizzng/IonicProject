{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/framework-delegate-d1eb6504.js","./node_modules/@ionic/core/dist/esm/haptic-ccbda579.js","./node_modules/@ionic/core/dist/esm/spinner-configs-c78e170e.js","./node_modules/@ionic/core/dist/esm/theme-c2dc54d9.js","./src/app/services/student.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsD;;;;;;;;;;;;;ACjCtD;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEiH;;;;;;;;;;;;;AC3CjH;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wCAAwC,sCAAsC;AAC9E,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wCAAwC,sCAAsC;AAC9E,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"common-es2015.js","sourcesContent":["const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n    if (delegate) {\n        return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n    }\n    if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n        throw new Error('framework delegate is missing');\n    }\n    const el = (typeof component === 'string')\n        ? container.ownerDocument && container.ownerDocument.createElement(component)\n        : component;\n    if (cssClasses) {\n        cssClasses.forEach(c => el.classList.add(c));\n    }\n    if (componentProps) {\n        Object.assign(el, componentProps);\n    }\n    container.appendChild(el);\n    if (el.componentOnReady) {\n        await el.componentOnReady();\n    }\n    return el;\n};\nconst detachComponent = (delegate, element) => {\n    if (element) {\n        if (delegate) {\n            const container = element.parentElement;\n            return delegate.removeViewFromDom(container, element);\n        }\n        element.remove();\n    }\n    return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","/**\n * Check to see if the Haptic Plugin is available\n * @return Returns `true` or false if the plugin is available\n */\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.selection();\n    }\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.gestureSelectionStart();\n    }\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.gestureSelectionChanged();\n    }\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.gestureSelectionEnd();\n    }\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelectionEnd as c, hapticSelection as h };\n","const spinners = {\n    'bubbles': {\n        dur: 1000,\n        circles: 9,\n        fn: (dur, index, total) => {\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            const angle = 2 * Math.PI * index / total;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circles': {\n        dur: 1000,\n        circles: 8,\n        fn: (dur, index, total) => {\n            const step = index / total;\n            const animationDelay = `${(dur * step) - dur}ms`;\n            const angle = 2 * Math.PI * step;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circular': {\n        dur: 1400,\n        elmDuration: true,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 20,\n                cx: 48,\n                cy: 48,\n                fill: 'none',\n                viewBox: '24 24 48 48',\n                transform: 'translate(0,0)',\n                style: {}\n            };\n        }\n    },\n    'crescent': {\n        dur: 750,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 26,\n                style: {}\n            };\n        }\n    },\n    'dots': {\n        dur: 750,\n        circles: 3,\n        fn: (_, index) => {\n            const animationDelay = -(110 * index) + 'ms';\n            return {\n                r: 6,\n                style: {\n                    'left': `${9 - (9 * index)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 17,\n                y2: 29,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines-small': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 12,\n                y2: 20,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","const hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color) => {\n    return (typeof color === 'string' && color.length > 0) ? {\n        'ion-color': true,\n        [`ion-color-${color}`]: true\n    } : undefined;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter(c => c != null)\n            .map(c => c.trim())\n            .filter(c => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach(c => map[c] = true);\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","import { Injectable } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection, DocumentReference} from '@angular/fire/firestore';\nimport { map, take } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as firebase from 'firebase/app';\nimport { AngularFireStorage } from \"@angular/fire/storage\";\n\n// Needed to create reference to cloud stotage and make url \nimport { AngularFireStorageReference } from '@angular/fire/storage';\nimport { from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n//import { AngularFireAuthGuard} from '@angular/fire/auth-guard';\nimport { AngularFireAuth } from '@angular/fire/auth';\n\n\n// Modify interface to include imageURL (firebase URL),\n// imageFilename (needed for deleting the file from firebase)\n// and createdAt (timeStamp)\nexport interface Student{\n  studentID?: string,\n  firstName: string,\n  lastName: string,\n  moduleNo1: string,\n  moduleNo2: string,\n  courseID: string,\n  imageURL: string,\n  imageFilename: string,\n  createdBy: string,\n  createdAt?: firebase.firestore.FieldValue;\n}\n\n// Interafce for Login\nexport interface User{\n  uid:string,\n  email: String\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentService {\n  // Reference to students Observable\n  private students: Observable<Student[]>;\n  // Reference to the studentCollection for Update/Delete Operations\n  private studentCollection: AngularFirestoreCollection<Student>;\n  // Current Logged in User\n  currentUser: User = null;\n\n \n  constructor(private storage: AngularFireStorage, private afs: AngularFirestore, private afAuth: AngularFireAuth) {\n    // Get a refence to the students collection\n    this.studentCollection = this.afs.collection<Student>('students-3');\n    // Could do this also to filter data based on the CreatedBy ID\n    //this.studentCollection = this.afs.collection<Student>('students-3', ref => ref.where(\"createdBy\", \"==\", `${this.currentUser.uid}`));\n    \n    // Get a refernce to a snapshot of the student collection data, i.e an observable that\n    // provides the actual array of students when subscribed to (emits the values!)\n    this.students = this.studentCollection.snapshotChanges().pipe(\n      map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data();\n          const studentID = a.payload.doc.id;\n          // Use spread operator (...) to include studentID\n          // in the returned data object\n          return { studentID, ...data };\n        });\n      })\n    );\n\n    // Check Login Status\n    this.afAuth.onAuthStateChanged(user => {\n      console.log(\"user changed:\", user);\n      this.currentUser = user;\n    });\n  }\n \n  // Get all students from service\n  getStudents(): Observable<Student[]> {\n    return this.students;\n  }\n \n  // This studentID refers to the id in Firebase, needed to update or delete\n  getStudent(studentID: string): Observable<Student> {\n    return this.studentCollection.doc<Student>(studentID).valueChanges().pipe(\n      take(1),\n      map(student => {\n        student.studentID = studentID;\n        return student\n      })\n    );\n  }\n \n  // addStudent(student: Student): Promise<DocumentReference> {\n  //   return this.studentCollection.add(student);\n  // }\n\n\n    addStudent(student: Student) {\n\n    // Name for image captured. This uses template literals to embed the date \n    // and use the text and append it to Dummy. Ensure to use ` instead of '\n    // to ensure it works. We will also add the imageFilename for deletion purposes\n    let imageFilename = `${new Date().getTime()}-ProfilePic.png`;\n    //let storageRef: AngularFireStorageReference = this.storage.ref(`/students/${imageFilename}`);\n    let storageRef = firebase.storage().ref(`/students/${imageFilename}`);\n\n    console.log(\"StorageRef\" + storageRef);\n    console.log(\"ImageFileName\" + imageFilename);\n\n    // Upload the raw base64 encoded string to storage using putString\n    const storageObs = from(storageRef.putString(student.imageURL, \"base64\", { contentType: 'image/png' }));\n\n    // Generate a URL for storing in the FireStore. This is used to display the image going forward\n    // This code creates an Observable which is then converted into a promise in order to extract\n    // the URL and then store it in the Firsestore imageURL field.\n    return storageObs.pipe(\n      switchMap(obj => {\n        console.log(\"Got File Download URL Promise\");\n        return obj.ref.getDownloadURL();\n      }),\n      switchMap(url => {\n        console.log(\"Got File Download URL\");\n        // Update student object with url, timetamp, imagefilename (for deletion) and creator (for filtering from DB, not done yet)\n        student.imageURL = url;\n        student.createdAt = firebase.firestore.FieldValue.serverTimestamp();\n        student.imageFilename = imageFilename;\n        student.createdBy = this.currentUser.uid;\n        return this.studentCollection.add(student);\n      })\n    )\n  }\n\n  // updateStudent(student: Student): Promise<void> {\n  //   return this.studentCollection.doc(student.studentID).update({ firstName: student.firstName, lastName: student.lastName, moduleNo1: student.moduleNo1, moduleNo2: student.moduleNo2, courseID: student.courseID });\n  // }\n\n  updateStudent(student: Student) {\n\n    // Name for New updated image captured. This uses template literals to embed the date \n    // and use the text and append it to Dummy. Ensure to use ` instead of '\n    // to ensure it works\n    let imageFilename = `${new Date().getTime()}-UpdatedProfilePic.png`;\n    \n    // Get a storage reference for the new file that will be uploaded in place of\n    // the existing one. We will replace the old one and delete it\n    let storageRef = firebase.storage().ref(`/students/${imageFilename}`);\n\n    // Delete old file from File Storage\n    this.deleteFile(student.imageFilename);\n\n    // Generate a URL for storing in the FireStore. This is used to display the image going forward\n    // This code creates an Observable which is then converted into a promise in order to extract\n    // the URL and then store it in the Firsestore imageURL field. \n    const storageObs = from(storageRef.putString(student.imageURL, \"base64\", { contentType: 'image/png' }));\n\n    return storageObs.pipe(\n      switchMap(obj => {\n        console.log(\"Got File Download URL Promise\");\n        return obj.ref.getDownloadURL();\n      }),\n      switchMap(url => {\n        console.log(\"Got File Download URL\");\n        student.imageURL = url;\n        student.createdAt = firebase.firestore.FieldValue.serverTimestamp();\n        student.imageFilename = imageFilename;\n        return this.studentCollection.doc(student.studentID).update(student);\n      })\n    )\n  }\n\n  \n \n  deleteStudent(student: Student): Promise<void> {\n\n    // Delete the file in Firebase Storage First\n    this.deleteFile(student.imageFilename);\n\n    // Delete record from Firebase Firestore using studentID\n    return this.studentCollection.doc(student.studentID).delete();\n\n  }\n\n  // Method for deleting a file from Firebase File Storage using\n  // the fileName from the FireStore record\n  deleteFile(fileName: string){\n\n    // Get a reference to file stored in the Firebase Storage bucket \n    //let storageRef = firebase.storage().ref().child(`students/${fileName}`);\n    let storageRef = firebase.storage().ref(`/students/${fileName}`);\n\n    // Delete the file\n    storageRef.delete().then(() => {\n      // File deleted successfully\n      console.log(\"File deleted successfully\");\n    }).catch((error) => {\n      // Uh-oh, an error occurred!\n      console.log(\"Error: File NOT deleted\");\n    });\n  }\n\n  // Sign-in method\n  signIn({email, password}){\n    return this.afAuth.signInWithEmailAndPassword(email, password);\n  }\n\n  // Sign-out method\n  signOut() {\n    return this.afAuth.signOut();\n  }\n\n  // Signup for a new accounnt using Angular Fire Auth\n  async signUp({email, password}){\n\n    // Create a user using username and passsord\n    const credential  = await this.afAuth.createUserWithEmailAndPassword(email, password);\n\n    // Collect user ID for storage\n    const uid = credential.user.uid;\n    // Store is Firsetore\n    return this.afs.doc(`users/${uid}`).set({uid, email: credential.user.email})\n\n  }\n\n}\n"],"sourceRoot":"webpack:///"}